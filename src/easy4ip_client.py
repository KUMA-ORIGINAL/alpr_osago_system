import asyncio
import os
import uuid
import time
import hashlib

import cv2
import httpx
import logging

logger = logging.getLogger(__name__)


class Easy4ipClient:
    """
    –û–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ Easy4ip API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ live –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ url.
    """
    def __init__(self):
        self.app_id = os.getenv("EASY4IP_APP_ID", "")
        self.app_secret = os.getenv("EASY4IP_APP_SECRET", "")
        self.data_center = os.getenv("EASY4IP_DATA_CENTER", "sg")

    def _sign(self, timestamp: int, nonce: str) -> str:
        raw = f"time:{timestamp},nonce:{nonce},appSecret:{self.app_secret}"
        return hashlib.md5(raw.encode("utf-8")).hexdigest()

    async def _request(self, endpoint: str, params: dict):
        timestamp = int(time.time())
        nonce = str(uuid.uuid4())
        sign = self._sign(timestamp, nonce)

        body = {
            "system": {
                "ver": "1.0",
                "appId": self.app_id,
                "sign": sign,
                "time": timestamp,
                "nonce": nonce,
            },
            "id": str(uuid.uuid4()),
            "params": params or {},
        }

        url = f"https://openapi-{self.data_center}.easy4ip.com/openapi/{endpoint}"
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.post(url, json=body)
            r.raise_for_status()
            return r.json()

    async def get_access_token(self) -> str:
        data = await self._request("accessToken", {})
        result = data.get("result", {})
        print(result)
        if result.get("code") != "0":
            raise RuntimeError(result.get("msg", f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {result!r}"))
        token = result["data"]["accessToken"]
        logger.info("Easy4ip —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        return token

    async def get_or_create_live_url(self, token: str, device_id: str, channel_id: str="0") -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç hls/live url."""
        # –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å
        bind = await self._request("bindDeviceLive", {
            "token": token,
            "deviceId": device_id,
            "channelId": channel_id,
            "streamId": 1,
            "liveMode": "proxy"
        })
        result = bind.get("result", {})
        code = result.get("code")
        if code == "0":
            data = result["data"]
        elif code == "LV1001":
            # —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ
            info = await self._request("getLiveStreamInfo", {
                "token": token, "deviceId": device_id, "channelId": channel_id
            })
            result = info.get("result", {})
            if result.get("code") != "0":
                raise RuntimeError(result.get("msg", "getLiveStreamInfo error"))
            data = result["data"]["streams"][0]
        else:
            raise RuntimeError(result.get("msg", "bindDeviceLive error"))
        return data.get("hls") or data.get("rtmp") or ""


async def get_stream_url(device_id: str):
    """
    –ü–æ–ª—É—á–∞–µ–º HLS –∏–ª–∏ RTMP URL —á–µ—Ä–µ–∑ Easy4ipClient.
    """
    client = Easy4ipClient()
    token = await client.get_access_token()
    url = await client.get_or_create_live_url(token, device_id)
    return url


async def main():
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    device_ids = '8L07D68PAZ5A24C'

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π ID (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    device_id = device_ids.split(",")[0].strip()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π URL
    stream_url = await get_stream_url(device_id)
    if not stream_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π URL")
        return

    print(f"üé• –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ—Ç–æ–∫: {stream_url}")

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—Ç–æ–∫—É —á–µ—Ä–µ–∑ OpenCV
    cap = cv2.VideoCapture(stream_url)
    if not cap.isOpened():
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚õî –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–ª—Å—è –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            break

        cv2.imshow("Easy4ip Live Stream", frame)

        # –≤—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ "q"
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    asyncio.run(main())