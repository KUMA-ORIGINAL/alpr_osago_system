import os
import logging
import httpx
import asyncio
from typing import Optional

logger = logging.getLogger(__name__)


class TelegramNotifier:
    def __init__(self, timeout: float = 10.0):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        self.timeout = timeout
        self.client: Optional[httpx.AsyncClient] = None

        if self.bot_token and self.chat_id:
            logger.info("Telegram –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    async def __aenter__(self):
        self.client = httpx.AsyncClient(timeout=self.timeout)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.client:
            await self.client.aclose()

    async def send_message(self, message: str, disable_notification: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ HTTPX"""
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        try:
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_notification': disable_notification
            }

            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(self.api_url, json=payload)

                if response.status_code == 200:
                    logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    error_data = response.json()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {error_data}")
                    return False

        except httpx.TimeoutException:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
            return False
        except httpx.NetworkError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
        except httpx.HTTPError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False

    async def send_message_with_retry(self,
                                      message: str,
                                      max_retries: int = 3,
                                      backoff_factor: float = 1.0) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π backoff –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        for attempt in range(max_retries):
            success = await self.send_message(message)

            if success:
                return True
            elif attempt < max_retries - 1:
                wait_time = backoff_factor * (2 ** attempt)
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.1f} —Å–µ–∫...")
                await asyncio.sleep(wait_time)

        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def send_photo(self, photo_url: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        try:
            payload = {
                'chat_id': self.chat_id,
                'photo': photo_url,
                'caption': caption,
                'parse_mode': 'HTML'
            }

            api_url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"

            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(api_url, json=payload)

                if response.status_code == 200:
                    logger.info("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    error_data = response.json()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: {response.status_code} - {error_data}")
                    return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
            return False

    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        if not self.bot_token:
            return False

        try:
            api_url = f"https://api.telegram.org/bot{self.bot_token}/getMe"

            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(api_url)
                return response.status_code == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    # –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    notifier = TelegramNotifier()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    success = await notifier.send_message("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    success = await notifier.send_message_with_retry(
        "–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        max_retries=3,
        backoff_factor=1.5
    )

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    async with TelegramNotifier() as notifier_ctx:
        await notifier_ctx.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if await notifier.check_connection():
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram")


if __name__ == "__main__":
    asyncio.run(main())