import asyncio
import json
import logging
import os
import time
from datetime import datetime
from typing import List, Dict, Any
import cv2
from fastapi import FastAPI
from contextlib import asynccontextmanager
import redis
from redis.exceptions import ConnectionError as RedisConnectionError

from alpr_processor import ALPRProcessor
from osago_checker import OSAGOChecker
from telegram_notifier import TelegramNotifier

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ALPROSAGOSystem:
    def __init__(self):
        self.alpr = ALPRProcessor()
        self.osago_checker = OSAGOChecker()
        self.telegram_notifier = TelegramNotifier()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.redis_client = None
        self.redis_available = False
        self.init_redis()

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        self.memory_cache = {}

        self.camera_urls = [url.strip() for url in os.getenv('CAMERA_RTSP_URLS', '').split(',') if url.strip()]
        self.check_interval = int(os.getenv('CHECK_INTERVAL', 60))

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.camera_urls)} –∫–∞–º–µ—Ä: {self.camera_urls}")

    def init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            redis_host = os.getenv('REDIS_HOST', 'localhost')
            redis_port = int(os.getenv('REDIS_PORT', 6379))

            self.redis_client = redis.Redis(
                host=redis_host,
                port=redis_port,
                decode_responses=True,
                socket_connect_timeout=5,
                retry_on_timeout=True
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.redis_client.ping()
            self.redis_available = True
            logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except (RedisConnectionError, Exception) as e:
            logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory –∫—ç—à")
            self.redis_available = False

    def get_cached_result(self, plate_number: str) -> tuple[bool, bool]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ (Redis –∏–ª–∏ memory)"""
        cache_key = f"plate:{plate_number}"

        if self.redis_available:
            try:
                cached_result = self.redis_client.get(cache_key)
                if cached_result is not None:
                    return True, cached_result == 'true'
            except RedisConnectionError:
                self.redis_available = False
                logger.warning("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ memory –∫—ç—à")

        # Fallback to memory cache
        if plate_number in self.memory_cache:
            cache_data = self.memory_cache[plate_number]
            if time.time() - cache_data['timestamp'] < self.check_interval:
                return True, cache_data['has_osago']

        return False, False

    def set_cached_result(self, plate_number: str, has_osago: bool):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à"""
        cache_key = f"plate:{plate_number}"

        if self.redis_available:
            try:
                self.redis_client.setex(cache_key, self.check_interval, 'true' if has_osago else 'false')
            except RedisConnectionError:
                self.redis_available = False
                logger.warning("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º memory –∫—ç—à")

        # Fallback to memory cache
        self.memory_cache[plate_number] = {
            'has_osago': has_osago,
            'timestamp': time.time()
        }

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ memory cache
        current_time = time.time()
        self.memory_cache = {
            plate: data for plate, data in self.memory_cache.items()
            if current_time - data['timestamp'] < self.check_interval
        }

    async def process_camera(self, camera_url: str, camera_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        reconnect_attempts = 0
        max_reconnect_attempts = 5

        while reconnect_attempts < max_reconnect_attempts:
            cap = None
            try:
                cap = cv2.VideoCapture(camera_url)

                if not cap.isOpened():
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É {camera_name}: {camera_url}")
                    reconnect_attempts += 1
                    await asyncio.sleep(10)
                    continue

                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–∞–º–µ—Ä–µ {camera_name}")
                reconnect_attempts = 0
                frame_count = 0
                last_processing_time = 0

                while True:
                    ret, frame = cap.read()

                    if not ret:
                        logger.warning(f"–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä–æ–π {camera_name}")
                        break

                    current_time = time.time()
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (1 –∫–∞–¥—Ä –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
                    if current_time - last_processing_time >= 1.0:
                        plates = self.alpr.detect_plates(frame)

                        for plate_info in plates:
                            await self.process_detected_plate(plate_info, camera_name)

                        last_processing_time = current_time
                        frame_count += 1

                    await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞–º–µ—Ä–µ {camera_name}: {e}")
                reconnect_attempts += 1

            finally:
                if cap is not None:
                    cap.release()

            if reconnect_attempts < max_reconnect_attempts:
                wait_time = min(30, 5 * reconnect_attempts)
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {camera_name} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)

        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {camera_name}")

    async def process_detected_plate(self, plate_info: Dict[str, Any], camera_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
        plate_number = plate_info['plate']
        confidence = plate_info['confidence']

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if confidence < 0.7:
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
        plate_number = plate_number.replace(' ', '').replace('-', '').upper()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        if len(plate_number) < 5 or len(plate_number) > 12:
            return

        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä: {plate_number} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")

        found_in_cache, has_osago = self.get_cached_result(plate_number)

        if found_in_cache:
            logger.info(f"–ù–æ–º–µ—Ä {plate_number} –∏–∑ –∫—ç—à–∞: –û–°–ê–ì–û {'–µ—Å—Ç—å' if has_osago else '–Ω–µ—Ç'}")
        else:
            has_osago = await self.osago_checker.check_osago(plate_number)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.set_cached_result(plate_number, has_osago)

            logger.info(f"–ù–æ–º–µ—Ä {plate_number} –ø—Ä–æ–≤–µ—Ä–µ–Ω: –û–°–ê–ì–û {'–µ—Å—Ç—å' if has_osago else '–Ω–µ—Ç'}")

        # –ï—Å–ª–∏ –û–°–ê–ì–û –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not has_osago:
            await self.send_violation_notification(plate_number, camera_name, plate_info)
        else:
            logger.info(f"–ù–æ–º–µ—Ä {plate_number} –ø—Ä–æ–ø—É—â–µ–Ω (–µ—Å—Ç—å –û–°–ê–ì–û)")

    async def send_violation_notification(self, plate_number: str, camera_name: str, plate_info: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏"""
        message = (
            f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±–µ–∑ –û–°–ê–ì–û\n"
            f"üì∑ –ö–∞–º–µ—Ä–∞: {camera_name}\n"
            f"üöó –ù–æ–º–µ—Ä: {plate_number}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {plate_info['confidence']:.2f}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
        violation_data = {
            'plate': plate_number,
            'camera': camera_name,
            'timestamp': datetime.now().isoformat(),
            'confidence': plate_info['confidence']
        }

        self.save_violation_log(violation_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await self.telegram_notifier.send_message_with_retry(message)

    def save_violation_log(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        log_file = "/app/data/violations.json"
        os.makedirs(os.path.dirname(log_file), exist_ok=True)

        try:
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(data, ensure_ascii=False) + '\n')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä"""
        tasks = []
        for i, camera_url in enumerate(self.camera_urls):
            camera_name = f"Camera_{i + 1}"
            task = asyncio.create_task(self.process_camera(camera_url, camera_name))
            tasks.append(task)

        await asyncio.gather(*tasks, return_exceptions=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
system = ALPROSAGOSystem()


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ALPR OSAGO...")
    asyncio.create_task(system.start_monitoring())
    yield
    # Shutdown
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã ALPR OSAGO...")


app = FastAPI(title="ALPR OSAGO System", lifespan=lifespan)


@app.get("/health")
async def health_check():
    redis_status = "connected" if system.redis_available else "disconnected"
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "cameras_count": len(system.camera_urls),
        "redis": redis_status,
        "memory_cache_size": len(system.memory_cache)
    }


@app.get("/stats")
async def get_stats():
    return {
        "cameras_count": len(system.camera_urls),
        "redis_available": system.redis_available,
        "memory_cache_size": len(system.memory_cache)
    }


@app.get("/violations")
async def get_violations(limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
    try:
        with open("/app/data/violations.json", "r", encoding='utf-8') as f:
            lines = f.readlines()[-limit:]
            return [json.loads(line) for line in lines]
    except FileNotFoundError:
        return []


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
