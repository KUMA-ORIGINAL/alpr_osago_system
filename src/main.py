import asyncio
import json
import logging
import os
import time
from datetime import datetime
from typing import Dict, Any
import cv2
from fastapi import FastAPI
from contextlib import asynccontextmanager
import redis
from redis.exceptions import ConnectionError as RedisConnectionError

from alpr_processor import ALPRProcessor
from osago_checker import OSAGOChecker
from telegram_notifier import TelegramNotifier
from easy4ip_client import Easy4ipClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ALPROSAGOSystem:
    def __init__(self):
        self.alpr = ALPRProcessor()
        self.osago_checker = OSAGOChecker()
        self.telegram_notifier = TelegramNotifier()

        # Redis
        self.redis_client = None
        self.redis_available = False
        self.init_redis()

        self.memory_cache: dict[str, dict] = {}

        # –∫–∞–º–µ—Ä—ã –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ Easy4ip
        raw_urls = os.getenv('CAMERA_RTSP_URLS', '')
        self.camera_urls = [url.strip() for url in raw_urls.split(',') if url.strip()]
        self.check_interval = int(os.getenv('CHECK_INTERVAL', 60))

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ALPR OSAGO System")
        logger.info(f"–ö–∞–º–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(self.camera_urls)}")

    def init_redis(self):
        try:
            redis_host = os.getenv('REDIS_HOST', 'localhost')
            redis_port = int(os.getenv('REDIS_PORT', 6379))
            self.redis_client = redis.Redis(
                host=redis_host,
                port=redis_port,
                decode_responses=True,
                socket_connect_timeout=5,
                retry_on_timeout=True
            )
            self.redis_client.ping()
            self.redis_available = True
            logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å")

    async def load_camera_urls_from_easy4ip(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL‚Äë—ã –∫–∞–º–µ—Ä —á–µ—Ä–µ–∑ Easy4ip, –µ—Å–ª–∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã"""
        if self.camera_urls:
            return  # –∑–∞–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é

        app_id = os.getenv("EASY4IP_APP_ID")
        secret = os.getenv("EASY4IP_APP_SECRET")
        if not app_id or not secret:
            logger.error("EASY4IP_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã –∏ CAMERA_RTSP_URLS –ø—É—Å—Ç–æ")
            return

        easy4ip = Easy4ipClient()
        token = await easy4ip.get_access_token()
        devices = os.getenv("EASY4IP_DEVICE_IDS", "")
        ids = [d.strip() for d in devices.split(",") if d.strip()]

        for dev_id in ids:
            try:
                url = await easy4ip.get_or_create_live_url(token, dev_id, "0")
                if url:
                    self.camera_urls.append(url)
                    logger.info(f"–î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {dev_id} –ø–æ–ª—É—á–µ–Ω live URL")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ Easy4ip –¥–ª—è {dev_id}: {e}")

    #  –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ‚Äì –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ (get_cached_result, set_cached_result, process_camera, –∏ —Ç.–¥.)
    #  –≤—Å—ë –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Üì‚Üì‚Üì

    def get_cached_result(self, plate_number: str) -> tuple[bool, bool]:
        cache_key = f"plate:{plate_number}"
        if self.redis_available:
            try:
                v = self.redis_client.get(cache_key)
                if v is not None:
                    return True, v == 'true'
            except RedisConnectionError:
                self.redis_available = False
                logger.warning("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis")
        d = self.memory_cache.get(plate_number)
        if d and time.time() - d['timestamp'] < self.check_interval:
            return True, d['has_osago']
        return False, False

    def set_cached_result(self, plate_number: str, has_osago: bool):
        cache_key = f"plate:{plate_number}"
        if self.redis_available:
            try:
                self.redis_client.setex(cache_key, self.check_interval, 'true' if has_osago else 'false')
            except RedisConnectionError:
                self.redis_available = False
        self.memory_cache[plate_number] = {'has_osago': has_osago, 'timestamp': time.time()}

    async def process_camera(self, camera_url: str, camera_name: str):
        reconnect_attempts = 0
        while reconnect_attempts < 5:
            cap = None
            try:
                cap = cv2.VideoCapture(camera_url)
                if not cap.isOpened():
                    raise RuntimeError("–∫–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å")
                logger.info(f"{camera_name}: –ø–æ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç")
                last_time = 0
                while True:
                    ret, frame = cap.read()
                    if not ret:
                        raise RuntimeError("–ø–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    now = time.time()
                    if now - last_time >= 1:
                        plates = self.alpr.detect_plates(frame)
                        for p in plates:
                            await self.process_detected_plate(p, camera_name)
                        last_time = now
                    await asyncio.sleep(0.01)
            except Exception as e:
                logger.error(f"{camera_name}: {e}")
                reconnect_attempts += 1
                await asyncio.sleep(min(30, 5 * reconnect_attempts))
            finally:
                if cap:
                    cap.release()
        logger.error(f"{camera_name}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª‚Äë–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")

    async def process_detected_plate(self, plate_info: Dict[str, Any], camera_name: str):
        plate = plate_info['plate'].replace(' ', '').replace('-', '').upper()
        conf = plate_info['confidence']
        if conf < 0.7 or len(plate) < 5:
            return
        cached, has_osago = self.get_cached_result(plate)
        if not cached:
            has_osago = await self.osago_checker.check_osago(plate)
            self.set_cached_result(plate, has_osago)
        if not has_osago:
            await self.send_violation_notification(plate, camera_name, plate_info)

    async def send_violation_notification(self, plate, camera_name, info):
        msg = (
            f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ! (–Ω–µ—Ç –û–°–ê–ì–û)\n"
            f"–ö–∞–º–µ—Ä–∞: {camera_name}\n"
            f"–ù–æ–º–µ—Ä: {plate}\n"
            f"–í—Ä–µ–º—è: {datetime.now():%Y-%m-%d %H:%M:%S}\n"
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {info['confidence']:.2f}"
        )
        self.save_violation_log({
            'plate': plate,
            'camera': camera_name,
            'timestamp': datetime.now().isoformat(),
            'confidence': info['confidence']
        })
        await self.telegram_notifier.send_message_with_retry(msg)

    def save_violation_log(self, data: Dict[str, Any]):
        path = "/app/data/violations.json"
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, 'a', encoding='utf-8') as f:
            f.write(json.dumps(data, ensure_ascii=False) + '\n')

    async def start_monitoring(self):
        await self.load_camera_urls_from_easy4ip()  # üîπ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        if not self.camera_urls:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return
        tasks = [asyncio.create_task(self.process_camera(url, f"Camera_{i+1}"))
                 for i, url in enumerate(self.camera_urls)]
        await asyncio.gather(*tasks, return_exceptions=True)


# FastAPI —á–∞—Å—Ç—å
system = ALPROSAGOSystem()

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("ALPR‚Äë—Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    asyncio.create_task(system.start_monitoring())
    yield
    logger.info("ALPR‚Äë—Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

app = FastAPI(title="ALPR OSAGO System", lifespan=lifespan)

@app.get("/health")
async def health():
    return {
        "status": "ok",
        "redis": "connected" if system.redis_available else "disconnected",
        "cameras": len(system.camera_urls),
        "memory_cache": len(system.memory_cache)
    }

@app.get("/violations")
async def get_violations(limit: int = 10):
    path = "/app/data/violations.json"
    try:
        with open(path, encoding='utf-8') as f:
            lines = f.readlines()[-limit:]
            return [json.loads(x) for x in lines]
    except FileNotFoundError:
        return []

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
